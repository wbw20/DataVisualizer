%Gyroscope - connection and calibration
clc;
%close all;
clear all;

%% Initialize serial port.
port='COM6';
if (~exist('serialFlag','var'))
    [gyroConnection.s,serialFlag] = setupSerial(port);
end

%% Figure GUI creation.
if(~exist('figurehandle', 'var') || ~ishandle(figurehandle))
    figurehandle = figure(1);
end
%add a start/stop button and close serial button inside figure
%This button calls the 'stop_call_tempGraph' function every time it is
%pressed
if(~exist('stopButton','var'))
    stopButton = uicontrol('Style','togglebutton','String','Stop & Close Serial Port',...
        'pos',[0 0 200 25],'parent',figurehandle);
end

% Create the axis selectors
if(~exist('axisSwitchX','var'))
    axisSwitchX=uicontrol('Style','checkbox','String','X: 0 degrees',...
        'pos',[300 0 50 25],'parent',figurehandle);
end
if(~exist('axisSwitchY','var'))
    axisSwitchY=uicontrol('Style','checkbox','String','Y: 0 degrees',...
        'pos',[350 0 50 25],'parent',figurehandle);
end
if(~exist('axisSwitchZ','var'))
    axisSwitchZ=uicontrol('Style','checkbox','String','Z: 0 degrees',...
        'pos',[400 0 50 25],'parent',figurehandle);
end

%Create the angle labels
if(~exist('degreeLabelX','var'))
    degreeLabelX = uicontrol('Style','text','String','X: 0 degrees',...
        'pos',[450 100 100 25],'parent',figurehandle);
end
if(~exist('degreeLabelY','var'))
    degreeLabelY = uicontrol('Style','text','String','Y: 0 degrees',...
        'pos',[450 75 100 25],'parent',figurehandle);
end
if(~exist('degreeLabelZ','var'))
    degreeLabelZ = uicontrol('Style','text','String','Z: 0 degrees',...
        'pos',[450 50 100 25],'parent',figurehandle);
end

% Create the display angle reset button
if(~exist('resetRadioButton','var'))
    resetRadioButton = uicontrol('Style','radiobutton','String','Reset',...
        'pos',[500 0 50 25],'parent',figurehandle);
end

%% Visualization

%Setup graph axes
graphAxes = axes('XLim', [-2 2], 'YLim', [-2 2], 'ZLim', [-2 2]);

%Turn view to 3D
view(3);
%Turn axis markers off and axis to equal
axis off;
axis equal;

%Create SM
[cylX, cylY, cylZ] = cylinder(1);
%Create CM
[conX, conY, conZ] = cylinder([1,0]);
%Create nozzle
[conx, cony, conz] = cylinder([0.5, 0.1]);



%Add the cylinder for the hgtransform array
hgTransformArray(1) = surface(cylX, cylY, cylZ);
%set(hgTransformArray(1),'scale',[1 1 10]);
%Add the cone to the hgtransform array
hgTransformArray(2) = surface(conX, conY, conZ + 1);
%Add the nozzle to the hgtransform array
hgTransformArray(3) = surface(conx, cony, conz - 1);

% Create the hgtransform
hgTransform = hgtransform('Parent',graphAxes);

% Add the hgtransform objects to the graph
set(hgTransformArray, 'Parent', hgTransform);
drawnow();
pause(0.25);

%% Calibrate

% Calibrate the gyro
%[gainx, gainy, gainz] = calibrateGyro(gyroConnection);
gainx=1;
gainy=1;
gainz=1;

[driftx, drifty, driftz] = calibrateGyro(gyroConnection);

%% Visualization loop

%Variables to store the actual angles (previously display)
%USE ACCELEROMETER TO INITIALIZE HERE: gz=9.8
%don't say reorient gyro, just 
displayAngleX = 0;
displayAngleY = 0;
displayAngleZ = 0;

%Variabls to store the (previous) actual angles
angleX = 0;
angleY = 0;
angleZ = 0;

%While stop button has not been pushed
while (get(stopButton,'Value') == 0)
    
    % Get the new angles
    [ newAngleX, newAngleY, newAngleZ ] = ...
        getAngles(gyroConnection, driftx, drifty, driftz);
    
    %If the X switch is on
    if get(axisSwitchX, 'Value') == 1
        % Get the change in angle from the previous run
        deltaAngleX = angleX - newAngleX;
        
        %Calculate the new display angle
        displayAngleX = displayAngleX + deltaAngleX;
        
        %Save the actual angle
        angleX = newAngleX;
        
        %Update the display text
        set(degreeLabelX,'String',...
            ['X: ' num2str(round(displayAngleX)) 'degrees']);
    end
    
    % If the Y switch is on
    if get(axisSwitchY, 'Value') == 1
        % Get the change in angle from the previous run
        deltaAngleY = angleY - newAngleY;
        
        %Calculate the new display angle
        displayAngleY = displayAngleY + deltaAngleY;
                
        %Save the actual angle
        angleY = newAngleY;
        
        %Update the display text
        set(degreeLabelY,'String',...
            ['Y: ' num2str(round(displayAngleY)) 'degrees']);
    end
    
    % If the Z switch is on
    if get(axisSwitchZ, 'Value') == 1
        % Get the change in angle from the previous run
        deltaAngleZ = angleZ - newAngleZ;
        
        %Calculate the new display angle
        displayAngleZ = displayAngleZ + deltaAngleZ;
                
        %Save the actual angle
        angleZ = newAngleZ;
        
        %Update the display text
        set(degreeLabelZ,'String',...
            ['Z: ' num2str(round(displayAngleZ)) 'degrees']);
    end
    
    
    
    % Form rotation matrices Roll, Pitch, Yaw and set transforms
    R = makehgtform('xrotate',(displayAngleX*pi/180), ...
        'yrotate',(displayAngleY*pi/180), ...
        'zrotate',(displayAngleZ*pi/180));
    
    %Set transforms
    set(hgTransform,'Matrix',R)
        
    % If reset button is pressed then
    if (get(resetRadioButton, 'Value')==1)
        %Reset the display angles
        %USE ACCELEROMETER INITIALIZATION HERE: gz=9.8
        displayAngleX=0;
        displayAngleY=0;
        displayAngleZ=0;
        
        % Reset the radio button to not selected
        set(resetRadioButton,'Value',0);
    end
    drawnow;
end
CloseSerial();
    
