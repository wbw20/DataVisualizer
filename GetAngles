function [angleX, angleY, angleZ ] = getAngles(gyroConnection, driftx, drifty, driftz)
%% Setup persistent variables
persistent previousRateX;
persistent previousRateY;
persistent previousRateZ;
if(isempty(previousRateX)); previousRateX = 0; end
if(isempty(previousRateY)); previousRateY = 0; end
if(isempty(previousRateZ)); previousRateZ = 0; end

persistent previousAngleX
persistent previousAngleY;
persistent previousAngleZ;
if(isempty(previousAngleX)); previousAngleX = 0; end
if(isempty(previousAngleY)); previousAngleY = 0; end
if(isempty(previousAngleZ)); previousAngleZ = 0; end

persistent previousTime;
if(isempty(previousTime)); previousTime = 0; tic; end

%% Calculate new angles

[rateX, rateY, rateZ] = readGyro(gyroConnection, false);
currentTime=toc;

%% Calculate X
% Angular rate in X axis
newAngleX = calculateAngle(previousRateX, rateX, driftx);

% Update the angle
angleX = updateAngle(previousAngleX + newAngleX);

%% Calculate Y
% Angular rate in Y axis
newAngleY = calculateAngle(previousRateY, rateY, drifty);

% Update the angle
angleY = updateAngle(previousAngleY + newAngleY);

%% Calculate Z
% Angular rate in X axis
newAngleZ = calculateAngle(previousRateZ, rateZ, driftz);

% Update the angle
angleZ = updateAngle(previousAngleZ + newAngleZ);

%% Store the previous values
previousRateX = rateX;
previousRateY = rateY;
previousRateZ = rateZ;
previousAngleX = angleX;
previousAngleY = angleY;
previousAngleZ = angleZ;
previousTime = currentTime;
%% Inner Functions
function [angle] = calculateAngle(previousRate, rate, drift)
% Delta angle = averaged angular velocity * delta time * gain
%angle = ((previousRate + rate)/2) * (currentTime - previousTime)*gain;
angle = (((previousRate + rate)/2)-drift) * (currentTime - previousTime);
end

function [ angle ] = updateAngle(angle)
        if (angle<0)
            angle = angle + 360;
        else if (angle >= 360)
                angle = angle - 360;
            end
        end
    end
end

